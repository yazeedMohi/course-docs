{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CMPUT 401 In this course, we review all phases of software development from a process perspective. The course introduces some of the best practices in software product and project management and the architectural and technological impacts on management. Group projects require specification and initial design or redesign of a software system.","title":"Index"},{"location":"#cmput-401","text":"In this course, we review all phases of software development from a process perspective. The course introduces some of the best practices in software product and project management and the architectural and technological impacts on management. Group projects require specification and initial design or redesign of a software system.","title":"CMPUT 401"},{"location":"course-outline/","text":"Course Outline Course Overview In this course, we review all phases of software development from a process perspective. The course introduces some of the best practices in software product and project management and the architectural and technological impacts on management. Group projects require specification and initial design or redesign of a software system. Prerequisites CMPUT 301, or permission of the instructor. Objectives and Learning Outcomes This course aims to provide students with an authentic experience of working with a client as a team member. We are partnering with the Community Service-Learning Office to create opportunities for you to work on projects identified by community-based organizations as serving their needs. In the process, you will have to apply your knowledge on analyzing requirements, designing, developing, documenting, and testing software, and develop new technical skills working with new programming languages and tools. You will also acquire new knowledge on how to work with others, how to interact with clients to elicit their needs and explain how the delivered software meets these needs, how to negotiate task sharing and manage one\u2019s tasks, how to plan and how to mitigate risks. Lecture Schedule and Assigned Readings The weekly topic schedule is likely to be updated during the term; in general terms, the topics to be covered are: Personality and Teamwork Software Product Management Software Requirements Software Development Process Software Architecture Estimation and Planning Project Management User-Interaction Design Testing Measurement There is no required textbook for this course. Each module will cite online resources as required readings. You will find the links to each topic on the course eClass page. Coursework and Evaluation Team Project (70% total) Your team will deliver the project through an evolutionary process in five sprints. All project deliverables will be submitted through the project repository and must be available for inspection by the TAs by 8 pm two days before the sprint demo (for example, if your sprint demo is on Monday, you must submit a release on Saturday, no later than 8 pm). Make sure that your release is on GitHub before 8 pm, there will be a penalty for late submissions (the late submission policy is outlined in the Sprint Rubrics document). The team is marked as a whole (left section in the table below), i.e. each team member receives equal marks. We may retroactively update your sprint marks based on your contribution factor . It means that your sprint scores may get either higher or lower. The coefficients depend on: How your team feels about your contribution to the project (based on the peer feedback forms). The instructor and TA's assessment of your individual contribution. We will review your contribution and apply individual coefficients twice during the term: After Sprint 3 (individual coefficients will be applied to Sprints 1, 2, and 3), After the end of the project (individual coefficients will be applied to Sprints 4 and 5). Team Project Grade Structure The team is marked as a whole, individual coefficients may be applied based on individual contribution. Component Weight Sprint 1 12% Sprint 2 12% Sprint 3 12% Sprint 4 12% Sprint 5 12% Screencast 3% Presentation 3% Final assessment by client 4% Total 70% Individual Work (30% total) Besides the final exam, your individual work component involves: One assignment (due date per class schedule) Reflection forms (four peer-review forms (one after each Sprint) and a final reflection), due by the end of each Sprint demo day (5) and by the end of the class (1) In-class participation Component Weight Assignment 5% Reflection forms 3% Participation 7% Final exam 15% Total 30% Participation Students are expected to attend and participate in all classes and labs, including the class hackathon. Each class may include one or more individual or group exercises. Each lab usually includes a stand-up meeting and may also include other individual or group activities. Missed participation work will not be excused. Letter Grades The conversion of your total numeric coursework score to a final grade will be based on interpreting the guidelines of the descriptors, letter grading system, and four-point scale as defined in Section 23.4 of the University Calendar. That is, grades are assigned on what we judge to be \"failure,\u201d \"minimal pass,\u201d \"poor,\u201d \"satisfactory,\u201d \"good,\u201d or \"excellent\" performance in the context of the class. We do not use a particular distribution to do the conversion but instead use our judgment of how your score reflects the mastery of the course material. Typically, you need to be above the median to earn at least a 3.0 or B. Grades are unofficial until approved by the Department and/or Faculty offering the course. Deferred Exams A student who cannot write the final examination due to incapacitating illness, severe domestic affliction or other compelling reasons can apply for a deferred final examination. Such an application must be made to the student's Faculty office within two working days of the missed examination and must be supported by a Statutory Declaration or other appropriate documentation (University Calendar \u00a723.5.6 ). Deferred examinations are a privilege and not a right; there is no guarantee that a deferred examination will be granted. Misrepresentation of facts to gain an excused absence is a breach of the Code of Student Behavior. See the general GFC rules on Absence from Exams . Student Responsibilities Academic Integrity Code of Student Behaviour The University of Alberta is committed to the highest standards of academic integrity and honesty. Students are expected to be familiar with these standards regarding academic honesty and to uphold the policies of the University in this respect. Students are particularly urged to familiarize themselves with the provisions of the Code of Student Behaviour (see link above) and avoid any behaviour which could potentially result in suspicions of cheating, plagiarism, misrepresentation of facts and/or participation in an offence. Academic dishonesty is a serious offence and can result in suspension or expulsion from the University. All forms of academic dishonesty are unacceptable at the University. Any suspected offence will be reported to the Faculty of Science. Anyone who is found in violation of the Code of Student Behaviour may receive a sanction. Typical sanctions include conduct probation, a mark reduction or a mark of 0 on an assessment, a grade reduction or a grade of F in a course, a remark on the transcript, and a recommendation for suspension or expulsion. Conduct of Exams Conduct of Exams In-Class Conduct Recording and/or distribution of course materials is allowed only with the prior written consent of the instructor. Accessibility-Related Accommodations Eligible students should visit the Academic Accommodations webpage for further information. Student Success Centre Students who require additional help in developing strategies for better time management, study skills, or examination skills should contact the Academic Success Centre (1-80 SUB). Disclaimer Any typographical errors in this Course Outline are subject to change and will be announced in class.","title":"Course Outline"},{"location":"course-outline/#course-outline","text":"","title":"Course Outline"},{"location":"course-outline/#course-overview","text":"In this course, we review all phases of software development from a process perspective. The course introduces some of the best practices in software product and project management and the architectural and technological impacts on management. Group projects require specification and initial design or redesign of a software system.","title":"Course Overview"},{"location":"course-outline/#prerequisites","text":"CMPUT 301, or permission of the instructor.","title":"Prerequisites"},{"location":"course-outline/#objectives-and-learning-outcomes","text":"This course aims to provide students with an authentic experience of working with a client as a team member. We are partnering with the Community Service-Learning Office to create opportunities for you to work on projects identified by community-based organizations as serving their needs. In the process, you will have to apply your knowledge on analyzing requirements, designing, developing, documenting, and testing software, and develop new technical skills working with new programming languages and tools. You will also acquire new knowledge on how to work with others, how to interact with clients to elicit their needs and explain how the delivered software meets these needs, how to negotiate task sharing and manage one\u2019s tasks, how to plan and how to mitigate risks.","title":"Objectives and Learning Outcomes"},{"location":"course-outline/#lecture-schedule-and-assigned-readings","text":"The weekly topic schedule is likely to be updated during the term; in general terms, the topics to be covered are: Personality and Teamwork Software Product Management Software Requirements Software Development Process Software Architecture Estimation and Planning Project Management User-Interaction Design Testing Measurement There is no required textbook for this course. Each module will cite online resources as required readings. You will find the links to each topic on the course eClass page.","title":"Lecture Schedule and Assigned Readings"},{"location":"course-outline/#coursework-and-evaluation","text":"","title":"Coursework and Evaluation"},{"location":"course-outline/#team-project-70-total","text":"Your team will deliver the project through an evolutionary process in five sprints. All project deliverables will be submitted through the project repository and must be available for inspection by the TAs by 8 pm two days before the sprint demo (for example, if your sprint demo is on Monday, you must submit a release on Saturday, no later than 8 pm). Make sure that your release is on GitHub before 8 pm, there will be a penalty for late submissions (the late submission policy is outlined in the Sprint Rubrics document). The team is marked as a whole (left section in the table below), i.e. each team member receives equal marks. We may retroactively update your sprint marks based on your contribution factor . It means that your sprint scores may get either higher or lower. The coefficients depend on: How your team feels about your contribution to the project (based on the peer feedback forms). The instructor and TA's assessment of your individual contribution. We will review your contribution and apply individual coefficients twice during the term: After Sprint 3 (individual coefficients will be applied to Sprints 1, 2, and 3), After the end of the project (individual coefficients will be applied to Sprints 4 and 5).","title":"Team Project (70% total)"},{"location":"course-outline/#team-project-grade-structure","text":"The team is marked as a whole, individual coefficients may be applied based on individual contribution. Component Weight Sprint 1 12% Sprint 2 12% Sprint 3 12% Sprint 4 12% Sprint 5 12% Screencast 3% Presentation 3% Final assessment by client 4% Total 70%","title":"Team Project Grade Structure"},{"location":"course-outline/#individual-work-30-total","text":"Besides the final exam, your individual work component involves: One assignment (due date per class schedule) Reflection forms (four peer-review forms (one after each Sprint) and a final reflection), due by the end of each Sprint demo day (5) and by the end of the class (1) In-class participation Component Weight Assignment 5% Reflection forms 3% Participation 7% Final exam 15% Total 30%","title":"Individual Work (30% total)"},{"location":"course-outline/#participation","text":"Students are expected to attend and participate in all classes and labs, including the class hackathon. Each class may include one or more individual or group exercises. Each lab usually includes a stand-up meeting and may also include other individual or group activities. Missed participation work will not be excused.","title":"Participation"},{"location":"course-outline/#letter-grades","text":"The conversion of your total numeric coursework score to a final grade will be based on interpreting the guidelines of the descriptors, letter grading system, and four-point scale as defined in Section 23.4 of the University Calendar. That is, grades are assigned on what we judge to be \"failure,\u201d \"minimal pass,\u201d \"poor,\u201d \"satisfactory,\u201d \"good,\u201d or \"excellent\" performance in the context of the class. We do not use a particular distribution to do the conversion but instead use our judgment of how your score reflects the mastery of the course material. Typically, you need to be above the median to earn at least a 3.0 or B. Grades are unofficial until approved by the Department and/or Faculty offering the course.","title":"Letter Grades"},{"location":"course-outline/#deferred-exams","text":"A student who cannot write the final examination due to incapacitating illness, severe domestic affliction or other compelling reasons can apply for a deferred final examination. Such an application must be made to the student's Faculty office within two working days of the missed examination and must be supported by a Statutory Declaration or other appropriate documentation (University Calendar \u00a723.5.6 ). Deferred examinations are a privilege and not a right; there is no guarantee that a deferred examination will be granted. Misrepresentation of facts to gain an excused absence is a breach of the Code of Student Behavior. See the general GFC rules on Absence from Exams .","title":"Deferred Exams"},{"location":"course-outline/#student-responsibilities","text":"","title":"Student Responsibilities"},{"location":"course-outline/#academic-integrity","text":"Code of Student Behaviour The University of Alberta is committed to the highest standards of academic integrity and honesty. Students are expected to be familiar with these standards regarding academic honesty and to uphold the policies of the University in this respect. Students are particularly urged to familiarize themselves with the provisions of the Code of Student Behaviour (see link above) and avoid any behaviour which could potentially result in suspicions of cheating, plagiarism, misrepresentation of facts and/or participation in an offence. Academic dishonesty is a serious offence and can result in suspension or expulsion from the University. All forms of academic dishonesty are unacceptable at the University. Any suspected offence will be reported to the Faculty of Science. Anyone who is found in violation of the Code of Student Behaviour may receive a sanction. Typical sanctions include conduct probation, a mark reduction or a mark of 0 on an assessment, a grade reduction or a grade of F in a course, a remark on the transcript, and a recommendation for suspension or expulsion.","title":"Academic Integrity"},{"location":"course-outline/#conduct-of-exams","text":"Conduct of Exams","title":"Conduct of Exams"},{"location":"course-outline/#in-class-conduct","text":"Recording and/or distribution of course materials is allowed only with the prior written consent of the instructor.","title":"In-Class Conduct"},{"location":"course-outline/#accessibility-related-accommodations","text":"Eligible students should visit the Academic Accommodations webpage for further information.","title":"Accessibility-Related Accommodations"},{"location":"course-outline/#student-success-centre","text":"Students who require additional help in developing strategies for better time management, study skills, or examination skills should contact the Academic Success Centre (1-80 SUB).","title":"Student Success Centre"},{"location":"course-outline/#disclaimer","text":"Any typographical errors in this Course Outline are subject to change and will be announced in class.","title":"Disclaimer"},{"location":"course-policies/","text":"Course Policies Team formation policy Goal The goal is to maximize the efficiency of students\u2019 teamwork and, therefore, learning efficiency. To achieve this goal, motivated, balanced, and diverse teams should be formed. Criteria The teams will be formed according to the following criteria: Personal preferences for projects Belbin team roles Career goals diversity Balance of more and less experienced students Starting Fall 2022, team formation is automated. The algorithm will form teams based on the criteria above. Detailed description of the optimization model: Forming CMPUT 401 Teams as a Mixed Integer-Linear Program (developed by Dr. Zachary Friggstad) . Process We will use the following process to form teams: Students fill the Belbin Team Roles Questionnaire (on paper) and calculate their results Students fill the Student Experience Form, indicating, among other questions, their assessed team roles, skills and career goals - link will be posted on eClass Students rank the projects based on their personal preferences - link will be posted on eClass Instructor will assign the students into teams, using the criteria above. The best effort to accommodate students\u2019 preferences will be made. However, we can not guarantee that every student will be assigned to the projects of their top choice. Dates Please refer to the live schedule (available on eClass). Dealing with non-cooperative team members policy Recommended steps If a team member refuses to carry their workload on the project, below are suggested steps. Have a constructive conversation with the uncooperative team member (see details below). If the problem persists, the team should notify their TA by email (with the instructor cc-ed). Based on that, a meetings with the team and/or the uncooperative team member will likely be scheduled. Suppose the team member still refuses to contribute. In that case, the team may notify the uncooperative member by email that they are in danger of being fired. A meeting will be scheduled to discuss what might happen next, including the possibility of firing a non-contributing team member. If there is no subsequent improvement, the team should notify the individual by email (copy to the TA and instructor) that they are no longer with the team. Firing could have significant consequences. A fired team member might have an option to work alone on an individual project assignment. An individual project is significantly more challenging than a team project because it requires an individual to independently complete the same deliverables. It should be considered as the last chance, not a free pass. Handling constructive conversations with your teammates We get frustrated about someone not contributing, or we get concerned or anxious about a deadline. It\u2019s to be expected on all projects. Do we just keep that frustration to ourselves and do extra work, not telling that person? Does that frustration come out in other ways? Is it possible that the person is not even aware that s/he is viewed this way? That\u2019s not fair to that person either! We are not protecting someone from bad news. We could actually be contributing to their career downfall. Now\u2019s the time to learn as students, so you don\u2019t have to learn on the job when you have more on the line. Five steps for a constructive conversation: What I notice and observe What is my concern How I interpret it What it means to me What change I would like to see (request SMART actions: Specific, Measurable, Attainable, Realistic, Time-Bound) Example of a constructive conversation You and your non-contributing teammate Steve. You: I see that you are behind with your project tasks. (Step 1) Steve: Yeah, probably I'm a little behind, ... You: I'm concerned about that because our next sprint deadline is pretty soon. (Step 2) Steve: Oh, I see. I\u2019m also really concerned about it! You: Maybe, you've got too much on your plate and are feeling stressed. I just want to check-in. (Step 3) Steve: Yes, I've got so many assignments and readings. I\u2019m very stressed out, ... You: This project is really important for me, and I would like to develop a cool app here. (Step 4) Steve: I understand. I would also like to do a good job with this project, ... You: Please finish the XYZ module until Friday so that our team has enough time to review the code and finalize deployment. (Step 5) Steve: Sure, I'll do it. Make sure to: Assume positive intent Listen non-judgementally Connect to feelings and concerns Reflect honestly on the intentions and needs involved. Based on: Oakley, B., Felder, R., Brent, R., & Elhajj, I. (2004). Turning Student Groups into Effective Teams.","title":"Course Policies"},{"location":"course-policies/#course-policies","text":"","title":"Course Policies"},{"location":"course-policies/#team-formation-policy","text":"","title":"Team formation policy"},{"location":"course-policies/#goal","text":"The goal is to maximize the efficiency of students\u2019 teamwork and, therefore, learning efficiency. To achieve this goal, motivated, balanced, and diverse teams should be formed.","title":"Goal"},{"location":"course-policies/#criteria","text":"The teams will be formed according to the following criteria: Personal preferences for projects Belbin team roles Career goals diversity Balance of more and less experienced students Starting Fall 2022, team formation is automated. The algorithm will form teams based on the criteria above. Detailed description of the optimization model: Forming CMPUT 401 Teams as a Mixed Integer-Linear Program (developed by Dr. Zachary Friggstad) .","title":"Criteria"},{"location":"course-policies/#process","text":"We will use the following process to form teams: Students fill the Belbin Team Roles Questionnaire (on paper) and calculate their results Students fill the Student Experience Form, indicating, among other questions, their assessed team roles, skills and career goals - link will be posted on eClass Students rank the projects based on their personal preferences - link will be posted on eClass Instructor will assign the students into teams, using the criteria above. The best effort to accommodate students\u2019 preferences will be made. However, we can not guarantee that every student will be assigned to the projects of their top choice.","title":"Process"},{"location":"course-policies/#dates","text":"Please refer to the live schedule (available on eClass).","title":"Dates"},{"location":"course-policies/#dealing-with-non-cooperative-team-members-policy","text":"","title":"Dealing with non-cooperative team members policy"},{"location":"course-policies/#recommended-steps","text":"If a team member refuses to carry their workload on the project, below are suggested steps. Have a constructive conversation with the uncooperative team member (see details below). If the problem persists, the team should notify their TA by email (with the instructor cc-ed). Based on that, a meetings with the team and/or the uncooperative team member will likely be scheduled. Suppose the team member still refuses to contribute. In that case, the team may notify the uncooperative member by email that they are in danger of being fired. A meeting will be scheduled to discuss what might happen next, including the possibility of firing a non-contributing team member. If there is no subsequent improvement, the team should notify the individual by email (copy to the TA and instructor) that they are no longer with the team. Firing could have significant consequences. A fired team member might have an option to work alone on an individual project assignment. An individual project is significantly more challenging than a team project because it requires an individual to independently complete the same deliverables. It should be considered as the last chance, not a free pass.","title":"Recommended steps"},{"location":"course-policies/#handling-constructive-conversations-with-your-teammates","text":"We get frustrated about someone not contributing, or we get concerned or anxious about a deadline. It\u2019s to be expected on all projects. Do we just keep that frustration to ourselves and do extra work, not telling that person? Does that frustration come out in other ways? Is it possible that the person is not even aware that s/he is viewed this way? That\u2019s not fair to that person either! We are not protecting someone from bad news. We could actually be contributing to their career downfall. Now\u2019s the time to learn as students, so you don\u2019t have to learn on the job when you have more on the line. Five steps for a constructive conversation: What I notice and observe What is my concern How I interpret it What it means to me What change I would like to see (request SMART actions: Specific, Measurable, Attainable, Realistic, Time-Bound)","title":"Handling constructive conversations with your teammates"},{"location":"course-policies/#example-of-a-constructive-conversation","text":"You and your non-contributing teammate Steve. You: I see that you are behind with your project tasks. (Step 1) Steve: Yeah, probably I'm a little behind, ... You: I'm concerned about that because our next sprint deadline is pretty soon. (Step 2) Steve: Oh, I see. I\u2019m also really concerned about it! You: Maybe, you've got too much on your plate and are feeling stressed. I just want to check-in. (Step 3) Steve: Yes, I've got so many assignments and readings. I\u2019m very stressed out, ... You: This project is really important for me, and I would like to develop a cool app here. (Step 4) Steve: I understand. I would also like to do a good job with this project, ... You: Please finish the XYZ module until Friday so that our team has enough time to review the code and finalize deployment. (Step 5) Steve: Sure, I'll do it. Make sure to: Assume positive intent Listen non-judgementally Connect to feelings and concerns Reflect honestly on the intentions and needs involved. Based on: Oakley, B., Felder, R., Brent, R., & Elhajj, I. (2004). Turning Student Groups into Effective Teams.","title":"Example of a constructive conversation"},{"location":"final-documentation/","text":"Final Documentation You will be working on these documents during Sprint 5. They should be separate from the initial documentation. Deployment instructions The deployment instructions should make it possible for your client to install and run your system on their own servers. User manual The form and format of the user manual should satisfy the needs of the client and user community. Generally, it should be organized by user tasks described step-by-step (not by screen elements, for example). Remember, that you are developing the user manual for the end users of your system, so think about their socio-cultural profile and level of experience. Job description After this project is over, your client might need to get someone on board to: Install and configure your system; Maintain and update your system, fix accidental bugs; Develop new features. As a part of the final documentation, you should provide a ready to publish job description. Include all the necessary skills that someone would need to work on your project.","title":"Final Documentation"},{"location":"final-documentation/#final-documentation","text":"You will be working on these documents during Sprint 5. They should be separate from the initial documentation.","title":"Final Documentation"},{"location":"final-documentation/#deployment-instructions","text":"The deployment instructions should make it possible for your client to install and run your system on their own servers.","title":"Deployment instructions"},{"location":"final-documentation/#user-manual","text":"The form and format of the user manual should satisfy the needs of the client and user community. Generally, it should be organized by user tasks described step-by-step (not by screen elements, for example). Remember, that you are developing the user manual for the end users of your system, so think about their socio-cultural profile and level of experience.","title":"User manual"},{"location":"final-documentation/#job-description","text":"After this project is over, your client might need to get someone on board to: Install and configure your system; Maintain and update your system, fix accidental bugs; Develop new features. As a part of the final documentation, you should provide a ready to publish job description. Include all the necessary skills that someone would need to work on your project.","title":"Job description"},{"location":"final-presentation/","text":"Final Presentation For the final presentation, we will use the PechaKucha format. Two simple rules for a PechaKucha presentation: Exactly 20 slides Each slide is displayed for precisely 20 seconds Total presentation time: 6 min 40 sec. You must use PowerPoint to set up automatic slide advancement ( how to set auto advancement ). Unfortunately, you can\u2019t do it in Google Slides. You need to upload your PowerPoint presentation to a shared Google Drive folder (see the link on eClass). What you might want to talk about Project: client and project background Team: names, photos, roles in the project, accomplishments Experience, ups and downs, what have we learned from this, fun stories about your team Technologies that we have used and learned Final product: the coolest features, UI and UX solutions Feedback from your client and/or users, deployment Useful links * How to Give a Great Pecha Kucha Talk * PechaKucha about PechaKucha, by Hans Van de Water * A Pecha Kucha about Pecha Kucha * Creating a Pecha Kucha Presentation Using PowerPoint or Keynote","title":"Final Presentation"},{"location":"final-presentation/#final-presentation","text":"For the final presentation, we will use the PechaKucha format. Two simple rules for a PechaKucha presentation: Exactly 20 slides Each slide is displayed for precisely 20 seconds Total presentation time: 6 min 40 sec. You must use PowerPoint to set up automatic slide advancement ( how to set auto advancement ). Unfortunately, you can\u2019t do it in Google Slides. You need to upload your PowerPoint presentation to a shared Google Drive folder (see the link on eClass).","title":"Final Presentation"},{"location":"final-presentation/#what-you-might-want-to-talk-about","text":"Project: client and project background Team: names, photos, roles in the project, accomplishments Experience, ups and downs, what have we learned from this, fun stories about your team Technologies that we have used and learned Final product: the coolest features, UI and UX solutions Feedback from your client and/or users, deployment","title":"What you might want to talk about"},{"location":"final-presentation/#useful-links","text":"* How to Give a Great Pecha Kucha Talk * PechaKucha about PechaKucha, by Hans Van de Water * A Pecha Kucha about Pecha Kucha * Creating a Pecha Kucha Presentation Using PowerPoint or Keynote","title":"Useful links"},{"location":"links/","text":"Links CMPUT 401 Projects Portal CMPUT 401 YouTube Channel CMPUT 401 GitHub org Open U of A","title":"Links"},{"location":"links/#links","text":"CMPUT 401 Projects Portal CMPUT 401 YouTube Channel CMPUT 401 GitHub org Open U of A","title":"Links"},{"location":"marking-rubrics/","text":"Marking Rubrics Team project Late release submission policy Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks. Sprint 1 For the first sprint, you will deliver: Project Requirements document An early version of the Software Design document (focusing on high-level architectural design) Project Management document Teamwork document Your documentation must be stored as markdown files in the /docs folder in the main branch of your GitHub repository. Use mkdocs and GitHub Pages to deploy the documentation. Example: https://ualberta-cmput401.github.io/example-documentation/ . Besides, you may start implementation. Deliverable Marks Project overview 10 User stories 20 High-level software design 15 Low-fidelity user interface 15 Sprint planning 15 Teamwork 15 Formatting 5 Wildcard 5 Total 100 Project overview Executive summary is clear, understandable, and concrete Glossary is clear and complete List of similar products is comprehensive, their functionalities are analyzed, with comments on how they may be used for code or inspiration Relevant open source projects are analyzed List of useful technical resources is comprehensive User stories Standard notation is used, numbering is consistent Complexity of each user story is estimated using story points The set of user stories is complete and relevant, it clearly demonstrates how exactly client requirements will be met Each user story is accompanied by viable acceptance tests User stories are prioritized using the MoSCoW method for the Minimum Viable Product (MVP) in a feasible way High-level software design High-level system architecture is clearly defined Major data elements are clearly defined (using UML Class diagram, or ER diagram) Most important interaction scenarios are clearly defined (using UML Sequence diagrams) Detailed list of technologies that will be used in the project is provided Low-fidelity user interface Low-fidelity wireframes clearly show the concepts of future functionalities Low-fidelity wireframes cover all user stories Navigation paths are clearly explained (using UI flow diagrams) Sprint planning Storymap clealy represents the project and includes all five sprints Project plan clearly shows the major milestones to be accomplished for all five sprints, including deadlines User stories are included in the project plan for Sprints 2 to 5 Estimated velocity is calculated for Sprints 2 to 5 Detailed Github Issues for Sprints 1 and 2 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees Teamwork Meeting minutes exist for all meetings and include all required information Team is working well with the client Team Canvas provides a clear overview of the team's profile Scrum roles are defined for the sprint Belbin roles are defined for each team member Formatting All documents are consistently formatted and carefully proofread Wildcard The wildcard percentage will be assigned to one or multiple items in the rubric (entirely or split between many items) depending on the life-cycle and specifics of each project Sprint 2 In the second sprint, you will finalize your project documentation. At this stage, your system design should be complete. You will make your hands dirty with the code and make significant progress on your codebase and tests. At the end of this sprint, you will have the first working prototype. Deliverable Marks Revisions 10 Detailed design 20 Codebase 25 Testing 10 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100 Revisions All comments from Sprint 1 have been sufficiently addressed Detailed design System architecture is clearly defined Data models are clearly defined (using UML Class diagram, or ER diagram) Interfaces (APIs, modules, etc.) are well defined and documented Design is complete, it fully represents the product, all planned functionalities can be explained/developed based on the design as documented Codebase Sufficient progress has been made (as planned in the previous sprint) GitHub repo is well organized, using the best practices Code is well structured and organized Code is well written and efficient Comments consistent is useful Testing Tests exist and run for (as many as possible of) the demonstrated functionalities Sprint planning Storymap clealy represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprints 3, 4, and 5 Sprint 3 tasks are included in the project plan Detailed Github Issues for Sprint 3 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees Teamwork Meeting minutes exist for all meetings and include all required information All team members attend meetings All team members have contributed to the sprint; each team member worked across multiple types of tasks (management, coding, testing, documentation, etc.) Team works well with the TA (asks questions/advice, reports progress meaningfully, addresses feedback) Team as a whole has made real progress since the last sprint - accomplished what they had planned to Scrum roles are defined for the sprint Wildcard The wildcard percentage will be assigned to one or multiple items in the rubric (entirely or split between many items) depending on the life-cycle and specifics of each project Sprint 3 In this sprint, you will continue working on the codebase and tests. You will also focus on UI and UX design. During the last week of this sprint, you will demo your prototype to your classmates (science fair style). Deliverable Marks Revisions 10 UX, UI design 20 Codebase 25 Testing 10 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100 Revisions , Codebase , Testing , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprint. UX, UI design Product user interface is consistent UX (user experience) is well thought-out and designed for the target audience UI design principles and usability heuristics are applied Accessibility patterns are used Sprint planning Storymap clealy represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprints 4 and 5 Sprint 4 tasks are included in the project plan Detailed Github Issues for Sprint 4 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees Sprint 4 In this sprint, you will deliver ~85% of the requirements. The prototype should be functional and usable but may have a few rough edges. Deliverable Marks Revisions 10 UX, UI design 10 Codebase 30 Testing 15 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100 Revisions , UX, UI design , Codebase , Testing , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprint. Sprint planning Storymap clealy represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprint 5 Sprint 5 tasks are included in the project plan Detailed Github Issues for Sprint 5 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees Sprint 5 During Sprint 5, you will be polishing the existing functionalities and working on user documentation. After this sprint, all requirements of the MVP must be complete. This system must be usable; it must deliver all \u201cmust-have\u201d functionalities, and, ideally, it should also deliver some \u201cnice-to-have\u201d features. Additionally, you will deliver the Final Documentation package: Deployment instructions User manual Job description (in case your client wants to hire a developer to support the system you created) Deliverable Marks Revisions 5 Deployment environment and documentation 20 Codebase 30 Testing 20 Teamwork 10 CMPUT 401 Portal 5 Wildcard 10 Total 100 Revisions , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprints. Deployment environment and documentation Deployment documentation is clear and complete; it fully covers backend and frontend List of required libraries with installation details is included Final prototype is deployed and functional Security defaults have been changed, debug and testing credentials are removed End-user documentation is available as a manual and as contextual help API is comprehensively documented Job description provides all the necessary information for the client if they need to hire a developer to maintain the system Codebase All \"Must\" and some Nice-to-have functionalities have been developed Github repo is well organized, using the best practices Code is well structured and organized Code is well written and efficient In-line code documentation (comments) is consistent is useful\" Testing All functionalities are sufficiently tested; tests cover whatever is important for the project (back-end logic, user interface, ...) At least one online testing tool has been tried and its reports have been analyzed (example: Selenium) Manual acceptance tests cover the implemented requirements CI/CD covers some of the functionalities CMPUT 401 Portal Project name Tagline Summary Source code link (if your client agreed to make the repository public) Logo (confirm with the client that it\u2019s okay to use their logo!) One selected screenshot Relevant tags Screencast Deliverable Marks Product demo 4 Organization 4 Script 4 Visual appeal and creativity 4 Audio quality 4 Total 20 Product demo The screencast shows the product in action and demonstrates its main features The main idea of the product is clearly communicated Organization The screencast is well organized and easy to follow Timing of the screencast is optimal (not too long, not too short) The level of detail is appropriate Script The script is clear and concise There are no spelling or grammar mistakes Visual appeal and creativity The screencast is visually appealing and creative The screencast engages the audience Audio quality The audio quality is good The voice is clear and easy to understand Presentation Deliverable Marks PechaKucha Slideshow 4 Project reflection 4 Organization 4 Presentation visual appeal and creativity 4 Preparation 4 Delivery 4 Teamwork 4 Total 28 PechaKucha Slideshow The presentation has 20 slides The slides automatically advance every 20 seconds Project reflection The presentation provides insights into the project, its development, and the team\u2019s experience Organization The presentation is well organized and easy to follow The material transitions logically from one slide to another Visual appeal and creativity The presentation is visually appealing and creative The images are relevant and well chosen Preparation The presentation is well rehearsed and the team members are confident Delivery The presentation is delivered in a clear and confident manner (pacing, tone, volume, eye contact, etc.) Teamwork The presentation is delivered by the whole team Final assessment by client Deliverable Marks Quality of MVP 50 Teamwork 50 Total 100 Individual work Assignment Please refer to the assignment description for details. Reflection forms Each form is marked as all-or-nothing. Deliverable Marks Sprint 1 form 10 Sprint 2 form 10 Sprint 3 form 10 Sprint 4 form 10 Sprint 5 form 10 Final individual reflection form 40 Total 100 Participation Participation is marked as follows: Failure (0): Participate in less than 50% of classes and labs; Unsatisfactory (2): Participate in more than or equal to 50% of classes and labs; Satisfactory (4): Participate in more than 60% of classes and labs; Good (6): Participate in more than 70% of classes and labs; Excellent (7): Participate in more than 85% of classes and labs.","title":"Marking Rubrics"},{"location":"marking-rubrics/#marking-rubrics","text":"","title":"Marking Rubrics"},{"location":"marking-rubrics/#team-project","text":"","title":"Team project"},{"location":"marking-rubrics/#late-release-submission-policy","text":"Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks.","title":"Late release submission policy"},{"location":"marking-rubrics/#sprint-1","text":"For the first sprint, you will deliver: Project Requirements document An early version of the Software Design document (focusing on high-level architectural design) Project Management document Teamwork document Your documentation must be stored as markdown files in the /docs folder in the main branch of your GitHub repository. Use mkdocs and GitHub Pages to deploy the documentation. Example: https://ualberta-cmput401.github.io/example-documentation/ . Besides, you may start implementation. Deliverable Marks Project overview 10 User stories 20 High-level software design 15 Low-fidelity user interface 15 Sprint planning 15 Teamwork 15 Formatting 5 Wildcard 5 Total 100","title":"Sprint 1"},{"location":"marking-rubrics/#project-overview","text":"Executive summary is clear, understandable, and concrete Glossary is clear and complete List of similar products is comprehensive, their functionalities are analyzed, with comments on how they may be used for code or inspiration Relevant open source projects are analyzed List of useful technical resources is comprehensive","title":"Project overview"},{"location":"marking-rubrics/#user-stories","text":"Standard notation is used, numbering is consistent Complexity of each user story is estimated using story points The set of user stories is complete and relevant, it clearly demonstrates how exactly client requirements will be met Each user story is accompanied by viable acceptance tests User stories are prioritized using the MoSCoW method for the Minimum Viable Product (MVP) in a feasible way","title":"User stories"},{"location":"marking-rubrics/#high-level-software-design","text":"High-level system architecture is clearly defined Major data elements are clearly defined (using UML Class diagram, or ER diagram) Most important interaction scenarios are clearly defined (using UML Sequence diagrams) Detailed list of technologies that will be used in the project is provided","title":"High-level software design"},{"location":"marking-rubrics/#low-fidelity-user-interface","text":"Low-fidelity wireframes clearly show the concepts of future functionalities Low-fidelity wireframes cover all user stories Navigation paths are clearly explained (using UI flow diagrams)","title":"Low-fidelity user interface"},{"location":"marking-rubrics/#sprint-planning","text":"Storymap clealy represents the project and includes all five sprints Project plan clearly shows the major milestones to be accomplished for all five sprints, including deadlines User stories are included in the project plan for Sprints 2 to 5 Estimated velocity is calculated for Sprints 2 to 5 Detailed Github Issues for Sprints 1 and 2 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees","title":"Sprint planning"},{"location":"marking-rubrics/#teamwork","text":"Meeting minutes exist for all meetings and include all required information Team is working well with the client Team Canvas provides a clear overview of the team's profile Scrum roles are defined for the sprint Belbin roles are defined for each team member","title":"Teamwork"},{"location":"marking-rubrics/#formatting","text":"All documents are consistently formatted and carefully proofread","title":"Formatting"},{"location":"marking-rubrics/#wildcard","text":"The wildcard percentage will be assigned to one or multiple items in the rubric (entirely or split between many items) depending on the life-cycle and specifics of each project","title":"Wildcard"},{"location":"marking-rubrics/#sprint-2","text":"In the second sprint, you will finalize your project documentation. At this stage, your system design should be complete. You will make your hands dirty with the code and make significant progress on your codebase and tests. At the end of this sprint, you will have the first working prototype. Deliverable Marks Revisions 10 Detailed design 20 Codebase 25 Testing 10 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100","title":"Sprint 2"},{"location":"marking-rubrics/#revisions","text":"All comments from Sprint 1 have been sufficiently addressed","title":"Revisions"},{"location":"marking-rubrics/#detailed-design","text":"System architecture is clearly defined Data models are clearly defined (using UML Class diagram, or ER diagram) Interfaces (APIs, modules, etc.) are well defined and documented Design is complete, it fully represents the product, all planned functionalities can be explained/developed based on the design as documented","title":"Detailed design"},{"location":"marking-rubrics/#codebase","text":"Sufficient progress has been made (as planned in the previous sprint) GitHub repo is well organized, using the best practices Code is well structured and organized Code is well written and efficient Comments consistent is useful","title":"Codebase"},{"location":"marking-rubrics/#testing","text":"Tests exist and run for (as many as possible of) the demonstrated functionalities","title":"Testing"},{"location":"marking-rubrics/#sprint-planning_1","text":"Storymap clealy represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprints 3, 4, and 5 Sprint 3 tasks are included in the project plan Detailed Github Issues for Sprint 3 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees","title":"Sprint planning"},{"location":"marking-rubrics/#teamwork_1","text":"Meeting minutes exist for all meetings and include all required information All team members attend meetings All team members have contributed to the sprint; each team member worked across multiple types of tasks (management, coding, testing, documentation, etc.) Team works well with the TA (asks questions/advice, reports progress meaningfully, addresses feedback) Team as a whole has made real progress since the last sprint - accomplished what they had planned to Scrum roles are defined for the sprint","title":"Teamwork"},{"location":"marking-rubrics/#wildcard_1","text":"The wildcard percentage will be assigned to one or multiple items in the rubric (entirely or split between many items) depending on the life-cycle and specifics of each project","title":"Wildcard"},{"location":"marking-rubrics/#sprint-3","text":"In this sprint, you will continue working on the codebase and tests. You will also focus on UI and UX design. During the last week of this sprint, you will demo your prototype to your classmates (science fair style). Deliverable Marks Revisions 10 UX, UI design 20 Codebase 25 Testing 10 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100 Revisions , Codebase , Testing , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprint.","title":"Sprint 3"},{"location":"marking-rubrics/#ux-ui-design","text":"Product user interface is consistent UX (user experience) is well thought-out and designed for the target audience UI design principles and usability heuristics are applied Accessibility patterns are used","title":"UX, UI design"},{"location":"marking-rubrics/#sprint-planning_2","text":"Storymap clealy represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprints 4 and 5 Sprint 4 tasks are included in the project plan Detailed Github Issues for Sprint 4 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees","title":"Sprint planning"},{"location":"marking-rubrics/#sprint-4","text":"In this sprint, you will deliver ~85% of the requirements. The prototype should be functional and usable but may have a few rough edges. Deliverable Marks Revisions 10 UX, UI design 10 Codebase 30 Testing 15 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100 Revisions , UX, UI design , Codebase , Testing , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprint.","title":"Sprint 4"},{"location":"marking-rubrics/#sprint-planning_3","text":"Storymap clealy represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprint 5 Sprint 5 tasks are included in the project plan Detailed Github Issues for Sprint 5 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees","title":"Sprint planning"},{"location":"marking-rubrics/#sprint-5","text":"During Sprint 5, you will be polishing the existing functionalities and working on user documentation. After this sprint, all requirements of the MVP must be complete. This system must be usable; it must deliver all \u201cmust-have\u201d functionalities, and, ideally, it should also deliver some \u201cnice-to-have\u201d features. Additionally, you will deliver the Final Documentation package: Deployment instructions User manual Job description (in case your client wants to hire a developer to support the system you created) Deliverable Marks Revisions 5 Deployment environment and documentation 20 Codebase 30 Testing 20 Teamwork 10 CMPUT 401 Portal 5 Wildcard 10 Total 100 Revisions , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprints.","title":"Sprint 5"},{"location":"marking-rubrics/#deployment-environment-and-documentation","text":"Deployment documentation is clear and complete; it fully covers backend and frontend List of required libraries with installation details is included Final prototype is deployed and functional Security defaults have been changed, debug and testing credentials are removed End-user documentation is available as a manual and as contextual help API is comprehensively documented Job description provides all the necessary information for the client if they need to hire a developer to maintain the system","title":"Deployment environment and documentation"},{"location":"marking-rubrics/#codebase_1","text":"All \"Must\" and some Nice-to-have functionalities have been developed Github repo is well organized, using the best practices Code is well structured and organized Code is well written and efficient In-line code documentation (comments) is consistent is useful\"","title":"Codebase"},{"location":"marking-rubrics/#testing_1","text":"All functionalities are sufficiently tested; tests cover whatever is important for the project (back-end logic, user interface, ...) At least one online testing tool has been tried and its reports have been analyzed (example: Selenium) Manual acceptance tests cover the implemented requirements CI/CD covers some of the functionalities","title":"Testing"},{"location":"marking-rubrics/#cmput-401-portal","text":"Project name Tagline Summary Source code link (if your client agreed to make the repository public) Logo (confirm with the client that it\u2019s okay to use their logo!) One selected screenshot Relevant tags","title":"CMPUT 401 Portal"},{"location":"marking-rubrics/#screencast","text":"Deliverable Marks Product demo 4 Organization 4 Script 4 Visual appeal and creativity 4 Audio quality 4 Total 20","title":"Screencast"},{"location":"marking-rubrics/#product-demo","text":"The screencast shows the product in action and demonstrates its main features The main idea of the product is clearly communicated","title":"Product demo"},{"location":"marking-rubrics/#organization","text":"The screencast is well organized and easy to follow Timing of the screencast is optimal (not too long, not too short) The level of detail is appropriate","title":"Organization"},{"location":"marking-rubrics/#script","text":"The script is clear and concise There are no spelling or grammar mistakes","title":"Script"},{"location":"marking-rubrics/#visual-appeal-and-creativity","text":"The screencast is visually appealing and creative The screencast engages the audience","title":"Visual appeal and creativity"},{"location":"marking-rubrics/#audio-quality","text":"The audio quality is good The voice is clear and easy to understand","title":"Audio quality"},{"location":"marking-rubrics/#presentation","text":"Deliverable Marks PechaKucha Slideshow 4 Project reflection 4 Organization 4 Presentation visual appeal and creativity 4 Preparation 4 Delivery 4 Teamwork 4 Total 28","title":"Presentation"},{"location":"marking-rubrics/#pechakucha-slideshow","text":"The presentation has 20 slides The slides automatically advance every 20 seconds","title":"PechaKucha Slideshow"},{"location":"marking-rubrics/#project-reflection","text":"The presentation provides insights into the project, its development, and the team\u2019s experience","title":"Project reflection"},{"location":"marking-rubrics/#organization_1","text":"The presentation is well organized and easy to follow The material transitions logically from one slide to another","title":"Organization"},{"location":"marking-rubrics/#visual-appeal-and-creativity_1","text":"The presentation is visually appealing and creative The images are relevant and well chosen","title":"Visual appeal and creativity"},{"location":"marking-rubrics/#preparation","text":"The presentation is well rehearsed and the team members are confident","title":"Preparation"},{"location":"marking-rubrics/#delivery","text":"The presentation is delivered in a clear and confident manner (pacing, tone, volume, eye contact, etc.)","title":"Delivery"},{"location":"marking-rubrics/#teamwork_2","text":"The presentation is delivered by the whole team","title":"Teamwork"},{"location":"marking-rubrics/#final-assessment-by-client","text":"Deliverable Marks Quality of MVP 50 Teamwork 50 Total 100","title":"Final assessment by client"},{"location":"marking-rubrics/#individual-work","text":"","title":"Individual work"},{"location":"marking-rubrics/#assignment","text":"Please refer to the assignment description for details.","title":"Assignment"},{"location":"marking-rubrics/#reflection-forms","text":"Each form is marked as all-or-nothing. Deliverable Marks Sprint 1 form 10 Sprint 2 form 10 Sprint 3 form 10 Sprint 4 form 10 Sprint 5 form 10 Final individual reflection form 40 Total 100","title":"Reflection forms"},{"location":"marking-rubrics/#participation","text":"Participation is marked as follows: Failure (0): Participate in less than 50% of classes and labs; Unsatisfactory (2): Participate in more than or equal to 50% of classes and labs; Satisfactory (4): Participate in more than 60% of classes and labs; Good (6): Participate in more than 70% of classes and labs; Excellent (7): Participate in more than 85% of classes and labs.","title":"Participation"},{"location":"meeting-minutes-example/","text":"Meeting Minutes Example \ud83d\udcc6 Oct 3, 2022, 9:00 am \ud83d\udccd CSC B-10 Agenda \ud83d\udccb Sprint 2 Deliverables Feedback from Sprint 1 Frontend: add a shared css file in lib folder Attendees \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddd1\u200d\ud83d\udcbb Yan Li Priya Patel Jacob Johnson Jessica Smith Marie Dupont Carlos Rodriguez Matthew Brown (TA) Rajesh Kumar (Client) Minutes \ud83d\udd51 Feedback from Sprint 1: User stories: US 3.03: add description for \u2018Import Different Kinds of CSV File\u2019 US 3.02: add description for \u2018Import Google Sheets Data\u2019. Move plotly dash and mongodb to Technical Resources in Project Requirement Doc Add user story number in Story map - Project Management Doc Add tabs for meeting minutes doc (by dates), don\u2019t make the page so long Add tabs for user stories - Project Requirement Doc Need a team name Bugs: Bug: MKdocs not working! Showing 404: Bug: Login window doesn\u2019t pop up in google chrome, but works in firefox. UI: Use libraries in svelte to build nav bar, so we can save some time to implement other functionalities: bulma Action Items \ud83e\uddfe Member Tasks Yan Implement tabs in mkdocs to reduce page length, bulma Priya Fixed bug in login page, logout Jacob Student data endpoint(s), Finish auth endpoint Jessica Fix documentation -> done, Figure out the DNS error with the GitHub authentication Marie Github analytics api to backend Carlos Build page for student, Look into plotly dash","title":"Meeting Minutes Example"},{"location":"meeting-minutes-example/#meeting-minutes-example","text":"\ud83d\udcc6 Oct 3, 2022, 9:00 am \ud83d\udccd CSC B-10","title":"Meeting Minutes Example"},{"location":"meeting-minutes-example/#agenda","text":"Sprint 2 Deliverables Feedback from Sprint 1 Frontend: add a shared css file in lib folder","title":"Agenda \ud83d\udccb"},{"location":"meeting-minutes-example/#attendees","text":"Yan Li Priya Patel Jacob Johnson Jessica Smith Marie Dupont Carlos Rodriguez Matthew Brown (TA) Rajesh Kumar (Client)","title":"Attendees \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddd1\u200d\ud83d\udcbb"},{"location":"meeting-minutes-example/#minutes","text":"","title":"Minutes \ud83d\udd51"},{"location":"meeting-minutes-example/#feedback-from-sprint-1","text":"User stories: US 3.03: add description for \u2018Import Different Kinds of CSV File\u2019 US 3.02: add description for \u2018Import Google Sheets Data\u2019. Move plotly dash and mongodb to Technical Resources in Project Requirement Doc Add user story number in Story map - Project Management Doc Add tabs for meeting minutes doc (by dates), don\u2019t make the page so long Add tabs for user stories - Project Requirement Doc Need a team name","title":"Feedback from Sprint 1:"},{"location":"meeting-minutes-example/#bugs","text":"Bug: MKdocs not working! Showing 404: Bug: Login window doesn\u2019t pop up in google chrome, but works in firefox.","title":"Bugs:"},{"location":"meeting-minutes-example/#ui","text":"Use libraries in svelte to build nav bar, so we can save some time to implement other functionalities: bulma","title":"UI:"},{"location":"meeting-minutes-example/#action-items","text":"Member Tasks Yan Implement tabs in mkdocs to reduce page length, bulma Priya Fixed bug in login page, logout Jacob Student data endpoint(s), Finish auth endpoint Jessica Fix documentation -> done, Figure out the DNS error with the GitHub authentication Marie Github analytics api to backend Carlos Build page for student, Look into plotly dash","title":"Action Items \ud83e\uddfe"},{"location":"project-documentation/","text":"Project Documentation You will be working on these documents during Sprint 1. In Sprint 2, you will refine and finalize the project documentation. After Sprint 2, you will update the Project Management page. All other documents will be considered final after the end Sprint 2. Example: https://ualberta-cmput401.github.io/example-documentation/ . Project requirements The purpose of this document is to explain the requirements of your software product. It should have the following sections. Executive summary Write a short overview of the project (one paragraph), including the following: The problem that the product will solve (use your client\u2019s language); Value proposition (what will be the essential functionality or your product); Who will use your product; How your product will be used. Project glossary Define any special terminology in the application domain (i.e., the terms that your client is using; not development, programming, or implementation terms). User stories User stories should be formulated using the standard notation (\u201cAs a [persona], I [want to], [so that].\u201d). Think carefully about who will be the users of your product, and formulate user stories for specific personae. Your collection of user stories should be complete and cohesive, it must clearly show how exactly the client\u2019s requirements will be met with your product. For each user story, you must formulate detailed acceptance tests. User stories must be prioritized using the MoSCoW method. Similar products List competitive or similar products that you may use as a reference and/or inspiration. Open-source products List any open-source products that might somehow benefit your product, e.g.: As a reference or inspiration; As an external interface that you might want to use; As a source of information and insights. Be creative and think outside the box. Technical resources List useful informational resources around the tools and frameworks that you plan to use. Software design The software design document should be consistent with the requirements document, it should document and explain how the design will actually deliver the required features. There is no one \u201cright\u201d way to create this document. Use your best judgement to choose the notations and tools. In any case, make sure that this document is meaningful with respect to your system. Be selective in what you portray about the architecture -- don\u2019t go into too much detail but don\u2019t make it overly superficial either. Suppose a new developer comes to the project: describe what is not obvious and definitely important to know. As for practical guidelines, each diagram should be described and motivated; you should use a consistent naming convention, and key elements should be annotated with further comments to explain their roles. Before getting started, refresh your understanding of UML, this book is recommended (chapters 1, 3, 4): https://learning.oreilly.com/library/view/uml-distilled-a/0321193687/ . High-level architecture Most likely, you will not use any UML notation for the architecture diagram. You are free to invent your own style of architecture diagram. Include a useful legend. Refer to the examples discussed in class for guidance. What\u2019s the right scope of the architecture diagram? \u201cOne that\u2019s big enough to be meaningful, small enough to be comprehensible, and cohesive enough to make sense.\u201d Study this chapter to feel the gist of creating good software architecture diagrams: Make sure that your diagram includes all layers. You can have more than one diagram if your project\u2019s complexity requires it. Major data elements If you adopt an object-oriented style for your system, you can present the data as a UML Class diagram. If your system is not naturally object-oriented, you can create an Entity Relationship diagram (ERD). Interaction scenarios To document the dynamic behaviour of the system, for each interesting feature, you should develop a UML Sequence diagram, with components as \u201cobjects\u201d and calls between them. Think, which features of your system should be described as sequence diagrams. Low-fidelity user interface Finally, you should develop low-fidelity sketches/wireframes of a few key screens. At this stage, it\u2019s important to show the overall look and feel of your app, as well as the high-level user-interaction design. Low-fidelity wireframes are usually black and white. Looking at the wireframes, anyone should be able to get an idea of what will be developed. Test your wireframes with your client, encourage them to give feedback. Project management There are two sections in this document: Storymap Project plan (or backlog) You should start the document with a storymap. Include all five sprints. Don't forget to indicate estimation of each user story (in story points). The second section should define a project plan. Sprint 1 For Sprint 1 , you should include the following: Due date Tasks to be completed (include asignees and due dates) Most Sprint 1 tasks will not be related to any user story. For example, you will be creating the project documentation, setting up the project repository, setting up the project management tools, etc. Sprint 2 For Sprint 2 , you should include: Due date List of user stories to be completed (include estimation of each user story in story points) Estimated sprint velocity Tasks to be completed (include asignees and due dates) The tasks should correspond with the user stories. Sprints 3, 4, and 5 For the remaining sprints, you should include: Due date List of user stories to be completed (include estimation of each user story in story points) Estimated sprint velocity Do not list the tasks yet. You will be planning them later, before the start of each sprint. GitHub Issues Based on the planned tasks , set up and keep current Github Issues. Teamwork This document includes two sections: Team canvas Belbin team roles Team canvas The Team canvas should be based on the template found here http://theteamcanvas.com/use /. You may choose the Basic or the Full version of the canvas. Use the instructions to facilitate the Team canvas session. An in-person session is recommended. However, if you choose an online format, you may use Mural or any other whiteboard tool. While creating your Team canvas, think about the high-level roles of each team member (e.g.: Scrum Master, Product Owner, Frontend Developer, Backend Developer, QA Engineer, DevOps Engineer, UI/UX Designer, Floater etc.). Think about which roles are necessary for your project. Each team member may be assigned to multiple roles, and each role may include multiple team members. There are two special Scrum roles that must be defined for each sprint: Scrum Master Product Owner You may choose to elect a Scrum Master and Product Owner for the whole project or switch roles for each sprint so that more team members can get product management experience. A good overview of skills and responsibilities of a Scrum Master and a Product Owner: https://productmanagerhq.com/scrum-master-vs-product-owner/ . Belbin team roles For each of the team member, list their preferred , manageable and least preferred roles. Then, list all nine Belbin roles and, for each role, provide a brief description and a list of people who are able to fulfill that role.","title":"Project Documentation"},{"location":"project-documentation/#project-documentation","text":"You will be working on these documents during Sprint 1. In Sprint 2, you will refine and finalize the project documentation. After Sprint 2, you will update the Project Management page. All other documents will be considered final after the end Sprint 2. Example: https://ualberta-cmput401.github.io/example-documentation/ .","title":"Project Documentation"},{"location":"project-documentation/#project-requirements","text":"The purpose of this document is to explain the requirements of your software product. It should have the following sections.","title":"Project requirements"},{"location":"project-documentation/#executive-summary","text":"Write a short overview of the project (one paragraph), including the following: The problem that the product will solve (use your client\u2019s language); Value proposition (what will be the essential functionality or your product); Who will use your product; How your product will be used.","title":"Executive summary"},{"location":"project-documentation/#project-glossary","text":"Define any special terminology in the application domain (i.e., the terms that your client is using; not development, programming, or implementation terms).","title":"Project glossary"},{"location":"project-documentation/#user-stories","text":"User stories should be formulated using the standard notation (\u201cAs a [persona], I [want to], [so that].\u201d). Think carefully about who will be the users of your product, and formulate user stories for specific personae. Your collection of user stories should be complete and cohesive, it must clearly show how exactly the client\u2019s requirements will be met with your product. For each user story, you must formulate detailed acceptance tests. User stories must be prioritized using the MoSCoW method.","title":"User stories"},{"location":"project-documentation/#similar-products","text":"List competitive or similar products that you may use as a reference and/or inspiration.","title":"Similar products"},{"location":"project-documentation/#open-source-products","text":"List any open-source products that might somehow benefit your product, e.g.: As a reference or inspiration; As an external interface that you might want to use; As a source of information and insights. Be creative and think outside the box.","title":"Open-source products"},{"location":"project-documentation/#technical-resources","text":"List useful informational resources around the tools and frameworks that you plan to use.","title":"Technical resources"},{"location":"project-documentation/#software-design","text":"The software design document should be consistent with the requirements document, it should document and explain how the design will actually deliver the required features. There is no one \u201cright\u201d way to create this document. Use your best judgement to choose the notations and tools. In any case, make sure that this document is meaningful with respect to your system. Be selective in what you portray about the architecture -- don\u2019t go into too much detail but don\u2019t make it overly superficial either. Suppose a new developer comes to the project: describe what is not obvious and definitely important to know. As for practical guidelines, each diagram should be described and motivated; you should use a consistent naming convention, and key elements should be annotated with further comments to explain their roles. Before getting started, refresh your understanding of UML, this book is recommended (chapters 1, 3, 4): https://learning.oreilly.com/library/view/uml-distilled-a/0321193687/ .","title":"Software design"},{"location":"project-documentation/#high-level-architecture","text":"Most likely, you will not use any UML notation for the architecture diagram. You are free to invent your own style of architecture diagram. Include a useful legend. Refer to the examples discussed in class for guidance. What\u2019s the right scope of the architecture diagram? \u201cOne that\u2019s big enough to be meaningful, small enough to be comprehensible, and cohesive enough to make sense.\u201d Study this chapter to feel the gist of creating good software architecture diagrams: Make sure that your diagram includes all layers. You can have more than one diagram if your project\u2019s complexity requires it.","title":"High-level architecture"},{"location":"project-documentation/#major-data-elements","text":"If you adopt an object-oriented style for your system, you can present the data as a UML Class diagram. If your system is not naturally object-oriented, you can create an Entity Relationship diagram (ERD).","title":"Major data elements"},{"location":"project-documentation/#interaction-scenarios","text":"To document the dynamic behaviour of the system, for each interesting feature, you should develop a UML Sequence diagram, with components as \u201cobjects\u201d and calls between them. Think, which features of your system should be described as sequence diagrams.","title":"Interaction scenarios"},{"location":"project-documentation/#low-fidelity-user-interface","text":"Finally, you should develop low-fidelity sketches/wireframes of a few key screens. At this stage, it\u2019s important to show the overall look and feel of your app, as well as the high-level user-interaction design. Low-fidelity wireframes are usually black and white. Looking at the wireframes, anyone should be able to get an idea of what will be developed. Test your wireframes with your client, encourage them to give feedback.","title":"Low-fidelity user interface"},{"location":"project-documentation/#project-management","text":"There are two sections in this document: Storymap Project plan (or backlog) You should start the document with a storymap. Include all five sprints. Don't forget to indicate estimation of each user story (in story points). The second section should define a project plan.","title":"Project management"},{"location":"project-documentation/#sprint-1","text":"For Sprint 1 , you should include the following: Due date Tasks to be completed (include asignees and due dates) Most Sprint 1 tasks will not be related to any user story. For example, you will be creating the project documentation, setting up the project repository, setting up the project management tools, etc.","title":"Sprint 1"},{"location":"project-documentation/#sprint-2","text":"For Sprint 2 , you should include: Due date List of user stories to be completed (include estimation of each user story in story points) Estimated sprint velocity Tasks to be completed (include asignees and due dates) The tasks should correspond with the user stories.","title":"Sprint 2"},{"location":"project-documentation/#sprints-3-4-and-5","text":"For the remaining sprints, you should include: Due date List of user stories to be completed (include estimation of each user story in story points) Estimated sprint velocity Do not list the tasks yet. You will be planning them later, before the start of each sprint.","title":"Sprints 3, 4, and 5"},{"location":"project-documentation/#github-issues","text":"Based on the planned tasks , set up and keep current Github Issues.","title":"GitHub Issues"},{"location":"project-documentation/#teamwork","text":"This document includes two sections: Team canvas Belbin team roles","title":"Teamwork"},{"location":"project-documentation/#team-canvas","text":"The Team canvas should be based on the template found here http://theteamcanvas.com/use /. You may choose the Basic or the Full version of the canvas. Use the instructions to facilitate the Team canvas session. An in-person session is recommended. However, if you choose an online format, you may use Mural or any other whiteboard tool. While creating your Team canvas, think about the high-level roles of each team member (e.g.: Scrum Master, Product Owner, Frontend Developer, Backend Developer, QA Engineer, DevOps Engineer, UI/UX Designer, Floater etc.). Think about which roles are necessary for your project. Each team member may be assigned to multiple roles, and each role may include multiple team members. There are two special Scrum roles that must be defined for each sprint: Scrum Master Product Owner You may choose to elect a Scrum Master and Product Owner for the whole project or switch roles for each sprint so that more team members can get product management experience. A good overview of skills and responsibilities of a Scrum Master and a Product Owner: https://productmanagerhq.com/scrum-master-vs-product-owner/ .","title":"Team canvas"},{"location":"project-documentation/#belbin-team-roles","text":"For each of the team member, list their preferred , manageable and least preferred roles. Then, list all nine Belbin roles and, for each role, provide a brief description and a list of people who are able to fulfill that role.","title":"Belbin team roles"},{"location":"screencast/","text":"Screencast Think about the screencast as a marketing vehicle for your project. Keep it short enough and engaging, be creative. Your goal is to demo your system in the best possible way. It will be posted on the CMPUT 401 portal and YouTube channel , you may use it for your portfolio. Upload your screencast to your Google Drive (preferably, in HD) and post the link in your Github repo.","title":"Screencast"},{"location":"screencast/#screencast","text":"Think about the screencast as a marketing vehicle for your project. Keep it short enough and engaging, be creative. Your goal is to demo your system in the best possible way. It will be posted on the CMPUT 401 portal and YouTube channel , you may use it for your portfolio. Upload your screencast to your Google Drive (preferably, in HD) and post the link in your Github repo.","title":"Screencast"},{"location":"teaching-team/","text":"Teaching Team Instructor Dr. Ildar Akhmetov ( website , LinkedIn ) Email : ildar@ualberta.ca Office hours (ATH 3-39): Wednesday, 1:00 pm - 3:00 pm (email to make an appointment outside office hours) Teaching Assistants Pranjal Dilip Naringrekar Email : naringre@ualberta.ca Office hours : email for appointment LinkedIn Shraddha Mukesh Makwana Email : smakwana@ualberta.ca Office hours : email for appointment LinkedIn Yazeed Mahmoud Email : yazeed1@ualberta.ca Office hours : email for appointment Vivek Malhotra Email : malhotra@ualberta.ca Office hours : email for appointment LinkedIn","title":"Teaching Team"},{"location":"teaching-team/#teaching-team","text":"","title":"Teaching Team"},{"location":"teaching-team/#instructor","text":"","title":"Instructor"},{"location":"teaching-team/#dr-ildar-akhmetov","text":"( website , LinkedIn ) Email : ildar@ualberta.ca Office hours (ATH 3-39): Wednesday, 1:00 pm - 3:00 pm (email to make an appointment outside office hours)","title":"Dr. Ildar Akhmetov"},{"location":"teaching-team/#teaching-assistants","text":"","title":"Teaching Assistants"},{"location":"teaching-team/#pranjal-dilip-naringrekar","text":"Email : naringre@ualberta.ca Office hours : email for appointment LinkedIn","title":"Pranjal Dilip Naringrekar"},{"location":"teaching-team/#shraddha-mukesh-makwana","text":"Email : smakwana@ualberta.ca Office hours : email for appointment LinkedIn","title":"Shraddha Mukesh Makwana"},{"location":"teaching-team/#yazeed-mahmoud","text":"Email : yazeed1@ualberta.ca Office hours : email for appointment","title":"Yazeed Mahmoud"},{"location":"teaching-team/#vivek-malhotra","text":"Email : malhotra@ualberta.ca Office hours : email for appointment LinkedIn","title":"Vivek Malhotra"}]}